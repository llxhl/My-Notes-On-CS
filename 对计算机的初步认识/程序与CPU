01.程序与CPU
思考：
	程序是什么？
	程序由什么组成？
	什么是机器语言？
	运行中的程序存储在什么位置？
	什么是内存地址？
	复制程序的解释和运行的计算机部件叫什么？
补充：
    CPU内部包含：寄存器、控制器、运算器、时钟
	高级语言->人能懂的东西，指令更加少
	   |编译器翻译   
	低级语言->cpu能懂的东西
	exe文件 1001011000代码 包含算法和数据 使用Hex工具可以查看二进制代码
	windows操作系统会将exe里面的东西加载到内存，CPU就可以通过寄存器、控制器、运算器、时钟和内存产生交互，cpu的寄存器、运算器、控制器进行整体的运算，运算速度由时钟来决定。
一、寄存器
	短暂的存储一些值的地方。相当于CPU中的内存，可以进行存和取的动作，
	对于软件工程师来说，唯一可以接触到的东西。
	cpu通过总线告诉主板上的控制器我要读取内存中的哪个单元，读取之后告诉CPU读取到的值，然后CPU拿着这个值放到寄存器去运算。
	汇编语言和cpu能懂的语言是一一对应的。（Intel白皮书）
	1）累加寄存器
		用来做累加是最快的，记录我们计算之后的数据，跟运算器的通信是最快的，只差一步之遥。
	2）标志寄存器
		记录CPU的状态，包括计算之后CPU里面的值是否溢出或为0,帮助我们进行逻辑判断。
		问：CPU如何来进行逻辑判断？
		答：CPU根据两个数的比较，比较后会改变标志寄存器，然后我们再取标志寄存器中指定的位，就知道两者的关系。
	3）程序计数器
		存储下一条指令在内存中的地址
		程序加载到内存之后，操作系统会告诉CPU，程序开始的地址是哪个地方，比如开始地址是0100，那么程序计数器会记录0101，当0100执行完之后，会再取一次程序计数器中的值，
	然后程序计数器就会自动的累加，变成0102，
	0100
	0101 2==3  ——(进行判断)需要程序计数器和标志计数器来完成      程序计数器   0101
	0102     < ——|(如果等于，执行)                               比较之后改写标志寄存器
	0103         |
	0104     < ——|(如果不等于，执行)
	这称为分支语句
	（32位，二进制，0表示否，1表示是，可以表示32种状态）CPU还会将标志寄存器一些部分进行置位的操作
	 比如第四位是z,（还有前溢出、后溢出等等32个状态）执行if(num==0)会被翻译成num-0,如果等于0，z的位就置1，
	 分支语句CPU做的事情：1、计算
	                    2、将标志寄存器进行置位
			    3、得出置位里面的值改写程序计数器里面的值来达到跳转的效果
	 跳转指令
	4）基址寄存器
		当前数据内存的起始地址
	5）变址寄存器
		存储基址寄存器的相对位置。
		基址寄存器+变址寄存器=内存地址
	6）通用寄存器
		什么地方都可以使用
	7）指令寄存器
		存储当前指令，程序员无法操作，是CPU内部使用的。
	8）栈
		记录栈的起始地址。
二、控制器 
    将内存或者寄存器当中的数据进行读入或写出（可以认为控制寄存器）
三、运算器 
    可以认为里面是一个逻辑运算单元，用来协助寄存器和控制器达到运算的效果（辅助单元）
四、时钟
	时钟的频率GHz，1个GHz相当于10亿次/秒，就是周期转一回的速度，每算一次，控制器完成一个指令。越贵的cpu时钟频率就越高。
	
